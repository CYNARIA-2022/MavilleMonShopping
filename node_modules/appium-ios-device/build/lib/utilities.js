"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.connectPort = connectPort;
exports.connectPortSSL = connectPortSSL;
exports.fetchImageFromGithubRepo = fetchImageFromGithubRepo;
exports.getConnectedDevices = getConnectedDevices;
exports.getDeviceInfo = getDeviceInfo;
exports.getDeviceName = getDeviceName;
exports.getDeviceTime = getDeviceTime;
exports.getOSVersion = getOSVersion;
exports.startLockdownSession = startLockdownSession;
require("source-map-support/register");
var _usbmux = _interopRequireWildcard(require("./usbmux"));
var _sslHelper = require("./ssl-helper");
var _lodash = _interopRequireDefault(require("lodash"));
var _logger = _interopRequireDefault(require("./logger"));
var _list_developer_image = require("./imagemounter/utils/list_developer_image");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const LOCKDOWN_REQUEST = {
  DEVICE_TIME: {
    Key: 'TimeIntervalSince1970'
  },
  DEVICE_UTC_OFFSET: {
    Key: 'TimeZoneOffsetFromUTC'
  },
  DEVICE_TIME_ZONE: {
    Key: 'TimeZone'
  },
  DEVICE_VERSION: {
    Key: 'ProductVersion'
  },
  DEVICE_NAME: {
    Key: 'DeviceName'
  }
};
async function getConnectedDevices(socket = null) {
  let usbmux;
  try {
    usbmux = new _usbmux.default(socket || (await (0, _usbmux.getDefaultSocket)()));
  } catch (e) {
    _logger.default.debug(e);
    return [];
  }
  try {
    const devices = await usbmux.listDevices();
    const udids = devices.map(device => device.Properties.SerialNumber);
    return _lodash.default.uniq(udids);
  } finally {
    usbmux.close();
  }
}
async function getOSVersion(udid, socket = null) {
  const usbmux = new _usbmux.default(socket || (await (0, _usbmux.getDefaultSocket)()));
  try {
    const lockdown = await usbmux.connectLockdown(udid);
    return await lockdown.getValue(LOCKDOWN_REQUEST.DEVICE_VERSION);
  } finally {
    usbmux.close();
  }
}
async function getDeviceName(udid, socket = null) {
  const usbmux = new _usbmux.default(socket || (await (0, _usbmux.getDefaultSocket)()));
  try {
    const lockdown = await usbmux.connectLockdown(udid);
    return await lockdown.getValue(LOCKDOWN_REQUEST.DEVICE_NAME);
  } finally {
    usbmux.close();
  }
}
async function getDeviceInfo(udid, socket = null) {
  const usbmux = new _usbmux.default(socket || (await (0, _usbmux.getDefaultSocket)()));
  try {
    const lockdown = await usbmux.connectLockdown(udid);
    return await lockdown.getValue();
  } finally {
    usbmux.close();
  }
}
async function getDeviceTime(udid, socket = null) {
  const lockdown = await startLockdownSession(udid, socket);
  try {
    return {
      timestamp: await lockdown.getValue(LOCKDOWN_REQUEST.DEVICE_TIME),
      utcOffset: (await lockdown.getValue(LOCKDOWN_REQUEST.DEVICE_UTC_OFFSET)) / 60,
      timeZone: await lockdown.getValue(LOCKDOWN_REQUEST.DEVICE_TIME_ZONE)
    };
  } finally {
    lockdown.close();
  }
}
async function startLockdownSession(udid, socket = null) {
  const usbmux = new _usbmux.default(socket || (await (0, _usbmux.getDefaultSocket)()));
  try {
    const pairRecord = await usbmux.readPairRecord(udid);
    if (!pairRecord) {
      throw new Error(`Could not find a pair record for device '${udid}'. Please first pair with the device`);
    }
    const lockdown = await usbmux.connectLockdown(udid);
    await lockdown.startSession(pairRecord.HostID, pairRecord.SystemBUID);
    lockdown.enableSessionSSL(pairRecord.HostPrivateKey, pairRecord.HostCertificate);
    return lockdown;
  } catch (e) {
    usbmux.close();
    throw e;
  }
}
async function connectPortSSL(udid, port, socket = null, handshakeOnly = false) {
  const usbmux = new _usbmux.default(socket || (await (0, _usbmux.getDefaultSocket)()));
  try {
    const device = await usbmux.findDevice(udid);
    if (!device) {
      throw new Error(`Could not find the expected device '${udid}'`);
    }
    const pairRecord = await usbmux.readPairRecord(udid);
    if (!pairRecord) {
      throw new Error(`Could not find a pair record for device '${udid}'. Please first pair with the device`);
    }
    const socket = await usbmux.connect(device.Properties.DeviceID, port, undefined);
    return handshakeOnly ? await (0, _sslHelper.enableSSLHandshakeOnly)(socket, pairRecord.HostPrivateKey, pairRecord.HostCertificate) : (0, _sslHelper.upgradeToSSL)(socket, pairRecord.HostPrivateKey, pairRecord.HostCertificate);
  } catch (e) {
    usbmux.close();
    throw e;
  }
}
async function connectPort(udid, port, socket = null) {
  const usbmux = new _usbmux.default(socket || (await (0, _usbmux.getDefaultSocket)()));
  try {
    const device = await usbmux.findDevice(udid);
    if (!device) {
      throw new Error(`Could not find the expected device ${udid}`);
    }
    return await usbmux.connect(device.Properties.DeviceID, port, undefined);
  } catch (e) {
    usbmux.close();
    throw e;
  }
}
async function fetchImageFromGithubRepo(udid, opts) {
  const osVersion = await getOSVersion(udid);
  if (!opts.githubRepo) {
    throw new TypeError(`Mount option should contains local path or github repo, got ${JSON.stringify(opts)} instead`);
  }
  return await (0, _list_developer_image.findDeveloperImage)(osVersion, opts);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
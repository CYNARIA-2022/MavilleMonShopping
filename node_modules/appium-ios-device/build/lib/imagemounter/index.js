"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MOBILE_IMAGE_MOUNTER_SERVICE_NAME = exports.ImageMounter = void 0;
require("source-map-support/register");
var _baseService = require("../base-service");
var _support = require("@appium/support");
var _bluebird = _interopRequireDefault(require("bluebird"));
var _logger = _interopRequireDefault(require("../logger"));
const {
  lstat,
  readFile,
  createReadStream
} = _support.fs;
const MOBILE_IMAGE_MOUNTER_SERVICE_NAME = 'com.apple.mobile.mobile_image_mounter';
exports.MOBILE_IMAGE_MOUNTER_SERVICE_NAME = MOBILE_IMAGE_MOUNTER_SERVICE_NAME;
const FILE_TYPE_IMAGE = 'image';
const FILE_TYPE_SIGNATURE = 'signature';
function checkIfError(ret) {
  if (ret.Error) {
    throw new Error(ret.Error);
  }
  return ret;
}
async function assertIsFile(filePath, fileType) {
  let fileStat;
  try {
    fileStat = await lstat(filePath);
  } catch (err) {
    if (err.code === 'ENOENT') {
      throw new Error(`The provided ${fileType} path does not exist: ${filePath}`);
    }
    throw err;
  }
  if (fileStat.isDirectory()) {
    throw new Error(`The provided ${fileType} path is expected to be a file, but a directory was given: ${filePath}`);
  }
  return fileStat;
}
class ImageMounter extends _baseService.BaseServicePlist {
  async lookup(imageType = 'Developer') {
    const ret = await this._plistService.sendPlistAndReceive({
      Command: 'LookupImage',
      ImageType: imageType
    });
    return checkIfError(ret).ImageSignature || [];
  }
  async isDeveloperImageMounted() {
    return (await this.lookup()).length > 0;
  }
  async mount(imageFilePath, imageSignatureFilePath, imageType = 'Developer') {
    var _mountResult$Detailed;
    const [imageFileStat] = await _bluebird.default.all([assertIsFile(imageFilePath, FILE_TYPE_IMAGE), assertIsFile(imageSignatureFilePath, FILE_TYPE_SIGNATURE)]);
    const signature = await readFile(imageSignatureFilePath);
    const mountedImages = await this.lookup(imageType);
    if (mountedImages.find(mountedSignature => signature.equals(mountedSignature))) {
      _logger.default.info(`An image with same signature of ${imageSignatureFilePath} is mounted. Doing nothing here`);
      return;
    }
    const imageSize = imageFileStat.size;
    const receiveBytesResult = await this._plistService.sendPlistAndReceive({
      Command: 'ReceiveBytes',
      ImageSignature: signature,
      ImageSize: imageSize,
      ImageType: imageType
    });
    if (checkIfError(receiveBytesResult).Status !== 'ReceiveBytesAck') {
      const errMsg = `Unexpected return from ${MOBILE_IMAGE_MOUNTER_SERVICE_NAME} on sending ReceiveBytes`;
      throw new Error(`${errMsg}: ${JSON.stringify(receiveBytesResult)}`);
    }
    const stream = createReadStream(imageFilePath);
    try {
      await new _bluebird.default((resolve, reject) => {
        stream.on('end', resolve);
        stream.on('error', reject);
        stream.on('data', async data => {
          try {
            await this._plistService._socketClient.write(data);
          } catch (e) {
            stream.emit('error', e);
          }
        });
      });
    } finally {
      stream.close();
    }
    const pushImageResult = await this._plistService.receivePlist();
    if (checkIfError(pushImageResult).Status !== 'Complete') {
      const errMsg = `Unexpected return from ${MOBILE_IMAGE_MOUNTER_SERVICE_NAME} on pushing image file`;
      throw new Error(`${errMsg}: ${JSON.stringify(pushImageResult)}`);
    }
    const mountResult = await this._plistService.sendPlistAndReceive({
      Command: 'MountImage',
      ImagePath: '/private/var/mobile/Media/PublicStaging/staging.dimag',
      ImageSignature: signature,
      ImageType: imageType
    });
    if ((_mountResult$Detailed = mountResult.DetailedError) !== null && _mountResult$Detailed !== void 0 && _mountResult$Detailed.includes('is already mounted at /Developer')) {
      _logger.default.info('DeveloperImage was already mounted');
      return;
    }
    checkIfError(mountResult);
  }
}
exports.ImageMounter = ImageMounter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
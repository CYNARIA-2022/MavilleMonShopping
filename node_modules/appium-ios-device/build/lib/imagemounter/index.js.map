{"version":3,"file":"index.js","names":["_baseService","require","_support","_bluebird","_interopRequireDefault","_logger","lstat","readFile","createReadStream","fs","MOBILE_IMAGE_MOUNTER_SERVICE_NAME","exports","FILE_TYPE_IMAGE","FILE_TYPE_SIGNATURE","checkIfError","ret","Error","assertIsFile","filePath","fileType","fileStat","err","code","isDirectory","ImageMounter","BaseServicePlist","lookup","imageType","_plistService","sendPlistAndReceive","Command","ImageType","ImageSignature","isDeveloperImageMounted","length","mount","imageFilePath","imageSignatureFilePath","_mountResult$Detailed","imageFileStat","B","all","signature","mountedImages","find","mountedSignature","equals","log","info","imageSize","size","receiveBytesResult","ImageSize","Status","errMsg","JSON","stringify","stream","resolve","reject","on","data","_socketClient","write","e","emit","close","pushImageResult","receivePlist","mountResult","ImagePath","DetailedError","includes"],"sources":["../../../lib/imagemounter/index.js"],"sourcesContent":["import { BaseServicePlist } from '../base-service';\nimport { fs } from '@appium/support';\nimport B from 'bluebird';\nimport log from '../logger';\nconst { lstat, readFile, createReadStream } = fs;\n\nconst MOBILE_IMAGE_MOUNTER_SERVICE_NAME = 'com.apple.mobile.mobile_image_mounter';\nconst FILE_TYPE_IMAGE = 'image';\nconst FILE_TYPE_SIGNATURE = 'signature';\n\nfunction checkIfError(ret) {\n    if (ret.Error) {\n        throw new Error(ret.Error);\n    }\n    return ret;\n}\n\nasync function assertIsFile(filePath, fileType) {\n    /** @type {import('fs').Stats | undefined} */\n    let fileStat;\n    try {\n        fileStat = await lstat(filePath);\n    } catch (err) {\n        if (/** @type {NodeJS.ErrnoException} */(err).code === 'ENOENT') {\n            throw new Error(`The provided ${fileType} path does not exist: ${filePath}`);\n        }\n        throw err;\n    }\n    if (fileStat.isDirectory()) {\n        throw new Error(`The provided ${fileType} path is expected to be a file, but a directory was given: ${filePath}`);\n    }\n    return fileStat;\n}\n\nclass ImageMounter extends BaseServicePlist {\n\n    /**\n     * Lookup for mounted images.\n     * @param {string} imageType Type of image, `Developer` by default.\n     * @returns {Promise<Buffer[]>} Signature of each mounted image.\n     */\n    async lookup(imageType = 'Developer') {\n        const ret = await this._plistService.sendPlistAndReceive({\n            Command: 'LookupImage',\n            ImageType: imageType\n        });\n        return checkIfError(ret).ImageSignature || [];\n    }\n\n    /**\n     * Check if developer image is mounted.\n     */\n    async isDeveloperImageMounted() {\n        return (await this.lookup()).length > 0;\n    }\n\n    /**\n     * Mount image for device.\n     * @param {string} imageFilePath The file path of image.\n     * @param {string} imageSignatureFilePath The signature file path of given `DeveloperDiskImage.dmg`\n     * @param {string} imageType Type of image, `Developer` by default.\n     */\n    async mount(imageFilePath, imageSignatureFilePath, imageType = 'Developer') {\n        //check file stats\n        const [imageFileStat] = await B.all([\n            assertIsFile(imageFilePath, FILE_TYPE_IMAGE),\n            assertIsFile(imageSignatureFilePath, FILE_TYPE_SIGNATURE)\n        ]);\n        //read signature\n        const signature = await readFile(imageSignatureFilePath);\n        const mountedImages = await this.lookup(imageType);\n        if (mountedImages.find((mountedSignature) => signature.equals(mountedSignature))) {\n            log.info(`An image with same signature of ${imageSignatureFilePath} is mounted. Doing nothing here`);\n            return;\n        }\n        //notify device\n        const imageSize = imageFileStat.size;\n        const receiveBytesResult = await this._plistService.sendPlistAndReceive({\n            Command: 'ReceiveBytes',\n            ImageSignature: signature,\n            ImageSize: imageSize,\n            ImageType: imageType\n        });\n        if (checkIfError(receiveBytesResult).Status !== 'ReceiveBytesAck') {\n            const errMsg = `Unexpected return from ${MOBILE_IMAGE_MOUNTER_SERVICE_NAME} on sending ReceiveBytes`;\n            throw new Error(`${errMsg}: ${JSON.stringify(receiveBytesResult)}`);\n        }\n        //push image to device\n        const stream = createReadStream(imageFilePath);\n        try {\n            await new B((resolve, reject) => {\n                stream.on('end', resolve);\n                stream.on('error', reject);\n                stream.on('data', async (data) => {\n                    try {\n                        await this._plistService._socketClient.write(data);\n                    } catch (e) {\n                        stream.emit('error', e);\n                    }\n                });\n            });\n        } finally {\n            stream.close();\n        }\n        const pushImageResult = await this._plistService.receivePlist();\n        if (checkIfError(pushImageResult).Status !== 'Complete') {\n            const errMsg = `Unexpected return from ${MOBILE_IMAGE_MOUNTER_SERVICE_NAME} on pushing image file`;\n            throw new Error(`${errMsg}: ${JSON.stringify(pushImageResult)}`);\n        }\n        //mount image\n        const mountResult = await this._plistService.sendPlistAndReceive({\n            Command: 'MountImage',\n            ImagePath: '/private/var/mobile/Media/PublicStaging/staging.dimag',\n            ImageSignature: signature,\n            ImageType: imageType\n        });\n        if (mountResult.DetailedError?.includes('is already mounted at /Developer')) {\n            log.info('DeveloperImage was already mounted');\n            return;\n        }\n        checkIfError(mountResult);\n    }\n}\nexport { ImageMounter, MOBILE_IMAGE_MOUNTER_SERVICE_NAME };"],"mappings":"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"}
{"version":3,"file":"list_developer_image.js","names":["_lodash","_interopRequireDefault","require","_support","_path","_axios","_logger","exists","readdir","mkdir","rimraf","fs","DEFAULT_IMAGE_DIR_NAME","DEVELOPER_IMAGE_FILE_NAME","DEVELOPER_IMAGE_SIGNATURE_FILE_NAME","listGithubImageList","githubImageOption","githubRepo","subFolderList","branch","initialUrl","repoUrl","fileList","curUrl","i","length","res","axios","get","body","data","treeList","tree","Error","join","JSON","stringify","entry","nextItem","_","find","item","path","errMsg","type","push","url","findDeveloperImageFromDirectory","withFileTypes","subEntry","name","isFile","isDirectory","fullPath","joinPath","subFolderResult","findDeveloperImage","version","finalVersion","split","splice","fileName","DEFAULT_IMAGE_DIR","env","resolveAppiumHome","fullDownloadPath","recursive","searchAndDownloadDeveloperImageFromGithub","decompressPath","developerImageParentFolder","zip","extractAllTo","developerImage","developerImageSignature","fileNameRegExp","RegExp","escapeRegExp","fileUrl","targetFile","test","splitter","subFolderPath","log","info","net","downloadFile","e"],"sources":["../../../../lib/imagemounter/utils/list_developer_image.js"],"sourcesContent":["import _ from 'lodash';\nimport { zip, net, env, fs } from '@appium/support';\nimport { join as joinPath } from 'path';\nimport axios from 'axios';\nimport log from '../../logger';\n\nconst { exists, readdir, mkdir, rimraf } = fs;\n/**\n * @typedef {Object} GithubTreeObject\n * @property {string} path\n * @property {string} mode\n * @property {'blob' | 'tree'} type\n * @property {string} sha\n * @property {number} size\n * @property {string} url\n */\n\n/**\n * @typedef {Object} GithubTreeResponse\n * @property {string} sha\n * @property {string} url\n * @property {GithubTreeObject[]} [tree]\n * @property {boolean} [truncated]\n * @property {string} [node_id]\n * @property {number} [size]\n * @property {string} [content]\n * @property {string} [base64]\n */\n\n/**\n * @typedef {Object} ImageFromGithubRepo Option to indicate which github repo and subfolder to use to search developer\n * image. The image and signature files should be compressed into a zip format, and the filename should match this\n * regular expression: `${finalVersion}(\\\\(([\\\\w_|.()])+\\\\))?.zip`\n * @property {string} githubRepo This should be in format of `$(group or username)/${repository}`, which contains\n * available images.\n * @property {string} branch\n * @property {string[]} [subFolderList] subfolder list in level order\n */\nconst DEFAULT_IMAGE_DIR_NAME = 'iOSDeviceSupport';\nconst DEVELOPER_IMAGE_FILE_NAME = 'DeveloperDiskImage.dmg';\nconst DEVELOPER_IMAGE_SIGNATURE_FILE_NAME = 'DeveloperDiskImage.dmg.signature';\n\n/**\n * Use list api to return the file list of folder.\n * @param {ImageFromGithubRepo} githubImageOption\n * @returns {Promise<GithubTreeObject[] | undefined>} file list under target folder\n */\nasync function listGithubImageList(githubImageOption) {\n    const { githubRepo, subFolderList = [], branch = 'master' } = githubImageOption;\n    const initialUrl = `https://api.github.com/repos/${githubRepo}/git/trees/${branch}`;\n    const repoUrl = `https://github.com/${githubRepo}/`;\n    const fileList = [];\n    let curUrl = initialUrl;\n    /**\n     * @type {GithubTreeObject[] | undefined}\n     */\n    for (let i = 0; i <= subFolderList.length; i++) {\n        const res = await axios.get(curUrl);\n        /**\n         * @type {GithubTreeResponse}\n         */\n        const body = res.data;\n        const treeList = body?.tree;\n        if (!treeList) {\n            throw new Error(`Failed on looking up ${fileList.join('/')} under ${repoUrl}: ${JSON.stringify(body)}`);\n        }\n        if (i === subFolderList.length) {\n            return treeList;\n        }\n        const entry = subFolderList[i];\n        const nextItem = _.find(treeList, (item) => item.path === entry);\n        if (!nextItem) {\n            const errMsg = `Unable to find ${entry} under ${fileList.join('/')} in ${repoUrl}`;\n            throw new Error(`${errMsg}: ${JSON.stringify(treeList)}`);\n        }\n        if (nextItem.type !== 'tree') {\n            const errMsg = `${entry} under ${fileList.join('/')} in ${repoUrl} is expected to be a tree`;\n            throw new Error(`${errMsg}, got ${nextItem.type} instead.`);\n        }\n        fileList.push(entry);\n        curUrl = nextItem.url;\n    }\n}\n\n/**\n * Find `DeveloperDiskImage.dmg` recursively under folder and subfolder.\n * @param {string} entry current folder\n * @returns {Promise<string | undefined>} parent folder of `DeveloperDiskImage.dmg`,\n *  or `undefined` if no such file exists\n */\nasync function findDeveloperImageFromDirectory(entry) {\n    const fileList = await readdir(entry, { withFileTypes: true });\n    for (const subEntry of fileList) {\n        if (subEntry.name === DEVELOPER_IMAGE_FILE_NAME && subEntry.isFile()) {\n            return entry;\n        }\n        if (subEntry.isDirectory()) {\n            const fullPath = joinPath(entry, subEntry.name);\n            const subFolderResult = await findDeveloperImageFromDirectory(fullPath);\n            if (subFolderResult) {\n                return subFolderResult;\n            }\n        }\n    }\n}\n\n/**\n * @typedef {Object} ImagePath\n * @property {string} developerImage\n * @property {string} developerImageSignature\n */\n\n/**\n * Find developer image for certain version. If developer image does not exists,\n * this will try to find and download developer image, unzip to `${APPIUM_HOME}/iOSSupport/`\n * @param {string} version full version of iOS device. The first two parts of version\n * will be preserved when sending the request, e.g. `14.7.1` will be changed to `14.7`\n * @param {ImageFromGithubRepo} githubImageOption\n * @returns {Promise<ImagePath>}\n * @throws If developer image is not found, or error while downloading or unzipping.\n */\nasync function findDeveloperImage(version, githubImageOption) {\n    const finalVersion = version.split('.').splice(0, 2).join('.');\n    const fileName = `${finalVersion}.zip`;\n    const DEFAULT_IMAGE_DIR = joinPath(await env.resolveAppiumHome(), DEFAULT_IMAGE_DIR_NAME);\n    const fullDownloadPath = joinPath(DEFAULT_IMAGE_DIR, fileName);\n    if (!await exists(DEFAULT_IMAGE_DIR)) {\n        await mkdir(DEFAULT_IMAGE_DIR, { recursive: true });\n    }\n    if (!await exists(fullDownloadPath)) {\n        await searchAndDownloadDeveloperImageFromGithub(finalVersion, fullDownloadPath, githubImageOption);\n    }\n    const decompressPath = joinPath(DEFAULT_IMAGE_DIR, finalVersion);\n    /** @type {string | undefined} */\n    let developerImageParentFolder;\n    if (await exists(decompressPath)) {\n        developerImageParentFolder = await findDeveloperImageFromDirectory(decompressPath);\n    }\n    if (!developerImageParentFolder) {\n        await zip.extractAllTo(fullDownloadPath, decompressPath);\n        developerImageParentFolder = await findDeveloperImageFromDirectory(decompressPath);\n    }\n    if (!developerImageParentFolder) {\n        throw new Error(`Unable to find unzipped developer image in ${decompressPath}`);\n    }\n    return {\n        developerImage: joinPath(developerImageParentFolder, DEVELOPER_IMAGE_FILE_NAME),\n        developerImageSignature: joinPath(developerImageParentFolder, DEVELOPER_IMAGE_SIGNATURE_FILE_NAME)\n    };\n}\n\n/**\n *\n * @param {string} finalVersion\n * @param {string} fullDownloadPath\n * @param {ImageFromGithubRepo} githubImageOption\n */\nasync function searchAndDownloadDeveloperImageFromGithub(finalVersion, fullDownloadPath, githubImageOption) {\n    const fileNameRegExp = new RegExp(`${_.escapeRegExp(finalVersion)}(\\\\(([\\\\w_|.()])+\\\\))?.zip`);\n    const { githubRepo, subFolderList = [], branch = 'master' } = githubImageOption;\n    /** @type {string | undefined} */\n    let fileUrl;\n    const fileList = await listGithubImageList(githubImageOption);\n    if (!fileList) {\n        throw new Error(`Failed to list https://github.com/${githubRepo}`);;\n    }\n    const targetFile = _.find(fileList, (item) => fileNameRegExp.test(item.path));\n    const splitter = subFolderList.length > 0 ? '/' : '';\n    const subFolderPath = `${splitter}${subFolderList.join('/')}${splitter}`;\n    if (targetFile) {\n        fileUrl = `https://raw.githubusercontent.com/${githubRepo}/${branch}${subFolderPath}${targetFile.path}`;\n    }\n    if (!fileUrl) {\n        throw new Error(`Failed to get developer image for iOS ${finalVersion}`);\n    }\n    try {\n        log.info(`Downloading developer image for ${finalVersion} to ${fullDownloadPath} from ${fileUrl}`);\n        await net.downloadFile(fileUrl, fullDownloadPath);\n    } catch (e) {\n        await rimraf(fullDownloadPath);\n        throw e;\n    }\n}\n\nexport { findDeveloperImage };"],"mappings":"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"}
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findDeveloperImage = findDeveloperImage;
require("source-map-support/register");
var _lodash = _interopRequireDefault(require("lodash"));
var _support = require("@appium/support");
var _path = require("path");
var _axios = _interopRequireDefault(require("axios"));
var _logger = _interopRequireDefault(require("../../logger"));
const {
  exists,
  readdir,
  mkdir,
  rimraf
} = _support.fs;
const DEFAULT_IMAGE_DIR_NAME = 'iOSDeviceSupport';
const DEVELOPER_IMAGE_FILE_NAME = 'DeveloperDiskImage.dmg';
const DEVELOPER_IMAGE_SIGNATURE_FILE_NAME = 'DeveloperDiskImage.dmg.signature';
async function listGithubImageList(githubImageOption) {
  const {
    githubRepo,
    subFolderList = [],
    branch = 'master'
  } = githubImageOption;
  const initialUrl = `https://api.github.com/repos/${githubRepo}/git/trees/${branch}`;
  const repoUrl = `https://github.com/${githubRepo}/`;
  const fileList = [];
  let curUrl = initialUrl;
  for (let i = 0; i <= subFolderList.length; i++) {
    const res = await _axios.default.get(curUrl);
    const body = res.data;
    const treeList = body === null || body === void 0 ? void 0 : body.tree;
    if (!treeList) {
      throw new Error(`Failed on looking up ${fileList.join('/')} under ${repoUrl}: ${JSON.stringify(body)}`);
    }
    if (i === subFolderList.length) {
      return treeList;
    }
    const entry = subFolderList[i];
    const nextItem = _lodash.default.find(treeList, item => item.path === entry);
    if (!nextItem) {
      const errMsg = `Unable to find ${entry} under ${fileList.join('/')} in ${repoUrl}`;
      throw new Error(`${errMsg}: ${JSON.stringify(treeList)}`);
    }
    if (nextItem.type !== 'tree') {
      const errMsg = `${entry} under ${fileList.join('/')} in ${repoUrl} is expected to be a tree`;
      throw new Error(`${errMsg}, got ${nextItem.type} instead.`);
    }
    fileList.push(entry);
    curUrl = nextItem.url;
  }
}
async function findDeveloperImageFromDirectory(entry) {
  const fileList = await readdir(entry, {
    withFileTypes: true
  });
  for (const subEntry of fileList) {
    if (subEntry.name === DEVELOPER_IMAGE_FILE_NAME && subEntry.isFile()) {
      return entry;
    }
    if (subEntry.isDirectory()) {
      const fullPath = (0, _path.join)(entry, subEntry.name);
      const subFolderResult = await findDeveloperImageFromDirectory(fullPath);
      if (subFolderResult) {
        return subFolderResult;
      }
    }
  }
}
async function findDeveloperImage(version, githubImageOption) {
  const finalVersion = version.split('.').splice(0, 2).join('.');
  const fileName = `${finalVersion}.zip`;
  const DEFAULT_IMAGE_DIR = (0, _path.join)(await _support.env.resolveAppiumHome(), DEFAULT_IMAGE_DIR_NAME);
  const fullDownloadPath = (0, _path.join)(DEFAULT_IMAGE_DIR, fileName);
  if (!(await exists(DEFAULT_IMAGE_DIR))) {
    await mkdir(DEFAULT_IMAGE_DIR, {
      recursive: true
    });
  }
  if (!(await exists(fullDownloadPath))) {
    await searchAndDownloadDeveloperImageFromGithub(finalVersion, fullDownloadPath, githubImageOption);
  }
  const decompressPath = (0, _path.join)(DEFAULT_IMAGE_DIR, finalVersion);
  let developerImageParentFolder;
  if (await exists(decompressPath)) {
    developerImageParentFolder = await findDeveloperImageFromDirectory(decompressPath);
  }
  if (!developerImageParentFolder) {
    await _support.zip.extractAllTo(fullDownloadPath, decompressPath);
    developerImageParentFolder = await findDeveloperImageFromDirectory(decompressPath);
  }
  if (!developerImageParentFolder) {
    throw new Error(`Unable to find unzipped developer image in ${decompressPath}`);
  }
  return {
    developerImage: (0, _path.join)(developerImageParentFolder, DEVELOPER_IMAGE_FILE_NAME),
    developerImageSignature: (0, _path.join)(developerImageParentFolder, DEVELOPER_IMAGE_SIGNATURE_FILE_NAME)
  };
}
async function searchAndDownloadDeveloperImageFromGithub(finalVersion, fullDownloadPath, githubImageOption) {
  const fileNameRegExp = new RegExp(`${_lodash.default.escapeRegExp(finalVersion)}(\\(([\\w_|.()])+\\))?.zip`);
  const {
    githubRepo,
    subFolderList = [],
    branch = 'master'
  } = githubImageOption;
  let fileUrl;
  const fileList = await listGithubImageList(githubImageOption);
  if (!fileList) {
    throw new Error(`Failed to list https://github.com/${githubRepo}`);
    ;
  }
  const targetFile = _lodash.default.find(fileList, item => fileNameRegExp.test(item.path));
  const splitter = subFolderList.length > 0 ? '/' : '';
  const subFolderPath = `${splitter}${subFolderList.join('/')}${splitter}`;
  if (targetFile) {
    fileUrl = `https://raw.githubusercontent.com/${githubRepo}/${branch}${subFolderPath}${targetFile.path}`;
  }
  if (!fileUrl) {
    throw new Error(`Failed to get developer image for iOS ${finalVersion}`);
  }
  try {
    _logger.default.info(`Downloading developer image for ${finalVersion} to ${fullDownloadPath} from ${fileUrl}`);
    await _support.net.downloadFile(fileUrl, fullDownloadPath);
  } catch (e) {
    await rimraf(fullDownloadPath);
    throw e;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Xctest = void 0;
require("source-map-support/register");
var _services = require("./services");
var _instrument = require("./instrument");
var _headers = require("./instrument/headers");
var _nskeyed = require("./instrument/transformer/nskeyed");
var _testmanagerd = require("./testmanagerd");
var _support = require("@appium/support");
var _utilities = require("./utilities");
var _logger = _interopRequireDefault(require("./logger"));
var _bluebird = _interopRequireDefault(require("bluebird"));
const {
  DAEMON_CONNECTION_INTERFACE
} = _testmanagerd.TESTMANAGERD_CHANNEL;
const XCTEST_CONFIGURATION_EXTENSION = '.xctestconfiguration';
const TMP_FOLDER_PREFIX = '/tmp';
const XCTEST_EXECUTABLE_SUFFIX = '-Runner';
const MAJOR_IOS_VERSION_9 = 9;
const MAJOR_IOS_VERSION_11 = 11;
const MAJOR_IOS_VERSION_12 = 12;
const XCODE_BUILD_PATH = '/Applications/Xcode.app/Contents/Developer/usr/bin/xcodebuild';
const XCODE_VERSION = 29;
const MAGIC_CHANNEL = 0xFFFFFFFF;
class Xctest {
  constructor(udid, xctestBundleId, targetBundleId = null, opts = {}) {
    this.udid = udid;
    this.running = false;
    this._executing = false;
    this.xctestBundleId = xctestBundleId;
    this.targetBundleId = targetBundleId;
    this._conf = (opts === null || opts === void 0 ? void 0 : opts.conf) || {};
    this._env = (opts === null || opts === void 0 ? void 0 : opts.env) || {};
  }
  async _launchAppRunner(majorVersion, sessionIdentifier) {
    const {
      PROCESS_CONTROL
    } = _instrument.INSTRUMENT_CHANNEL;
    const installation = await (0, _services.startInstallationProxyService)(this.udid);
    let lookupResult;
    try {
      lookupResult = await installation.lookupApplications({
        bundleIds: [this.xctestBundleId]
      });
    } finally {
      installation.close();
    }
    const appInfo = lookupResult[this.xctestBundleId];
    if (!appInfo) {
      throw new Error(`${this.xctestBundleId} not found on device ${this.udid}`);
    }
    const signerIdentifier = appInfo.SignerIdentity;
    _logger.default.info(`SignerIdentifier: ${signerIdentifier}`);
    const appContainer = appInfo.Container;
    const execName = appInfo.CFBundleExecutable;
    if (!execName.endsWith(XCTEST_EXECUTABLE_SUFFIX)) {
      throw new Error(`Invalid CFBundleExecutable ${execName} from ${this.xctestBundleId}, is this bundle a valid xctest app?`);
    }
    const targetName = execName.substr(0, execName.indexOf(XCTEST_EXECUTABLE_SUFFIX));
    const xctestPath = `${TMP_FOLDER_PREFIX}/${targetName}-${sessionIdentifier.toUpperCase()}${XCTEST_CONFIGURATION_EXTENSION}`;
    const xctestConfiguration = new _nskeyed.XCTestConfiguration({
      ...this._conf,
      testBundleURL: `file://${appInfo.Path}/PlugIns/${targetName}.xctest`,
      sessionIdentifier,
      targetApplicationBundleID: this.targetBundleId
    });
    await this._writeConfigurationToDevice(xctestConfiguration, xctestPath);
    this._instrumentService = await (0, _services.startInstrumentService)(this.udid);
    this._instrumentService.registerLifecycleCallback('close', this.stop.bind(this));
    await this._instrumentService.callChannel(PROCESS_CONTROL, 'processIdentifierForBundleIdentifier:', this.xctestBundleId);
    const appPath = appInfo.Path;
    const xctestConfigurationPath = appContainer + xctestPath;
    const appEnv = {
      CA_ASSERT_MAIN_THREAD_TRANSACTIONS: '0',
      CA_DEBUG_TRANSACTIONS: '0',
      DYLD_FRAMEWORK_PATH: `${appPath}/Frameworks:`,
      DYLD_LIBRARY_PATH: `${appPath}/Frameworks`,
      NSUnbufferedIO: 'YES',
      SQLITE_ENABLE_THREAD_ASSERTIONS: '1',
      WDA_PRODUCT_BUNDLE_IDENTIFIER: '',
      XCTestConfigurationFilePath: xctestConfigurationPath,
      XCODE_DBG_XPC_EXCLUSIONS: 'com.apple.dt.xctestSymbolicator',
      MJPEG_SERVER_PORT: '',
      USE_PORT: '',
      LLVM_PROFILE_FILE: `${appContainer}/tmp/%p.profraw`,
      ...this._env
    };
    if (majorVersion >= MAJOR_IOS_VERSION_11) {
      appEnv.DYLD_INSERT_LIBRARIES = '/Developer/usr/lib/libMainThreadChecker.dylib';
      appEnv.OS_ACTIVITY_DT_MODE = 'YES';
    }
    const appArgs = ['-NSTreatUnknownArgumentsAsOpen', 'NO', '-ApplePersistenceIgnoreState', 'YES'];
    const appOptions = {
      StartSuspendedKey: false
    };
    if (majorVersion >= MAJOR_IOS_VERSION_12) {
      appOptions.ActivateSuspended = true;
    }
    const launchResult = await this._instrumentService.callChannel(PROCESS_CONTROL, 'launchSuspendedProcessWithDevicePath:bundleIdentifier:environment:arguments:options:', appPath, this.xctestBundleId, appEnv, appArgs, appOptions);
    const pid = launchResult.selector;
    if (typeof pid !== 'number') {
      throw new Error(`Failed on launching ${this.xctestBundleId}: ${launchResult}`);
    }
    _logger.default.info(`Pid of launched ${this.xctestBundleId}: ${pid}`);
    const msg = new _headers.DTXMessageAuxBuffer();
    msg.appendObject(pid);
    await this._instrumentService.callChannel(PROCESS_CONTROL, 'startObservingPid:', msg);
    return pid;
  }
  async _writeConfigurationToDevice(xctestConfiguration, xctestPath) {
    const xctestContent = xctestConfiguration.getBytes();
    const houseArrestService = await (0, _services.startHouseArrestService)(this.udid);
    let vendContainer;
    let stream;
    try {
      vendContainer = await houseArrestService.vendContainer(this.xctestBundleId);
      const list = await vendContainer.listDirectory(TMP_FOLDER_PREFIX);
      for (const file of list) {
        if (file.endsWith(XCTEST_CONFIGURATION_EXTENSION)) {
          const fullPath = `${TMP_FOLDER_PREFIX}/${file}`;
          _logger.default.debug(`removing ${fullPath}`);
          await vendContainer.deleteDirectory(fullPath);
        }
      }
      stream = await vendContainer.createWriteStream(xctestPath, {});
      await new _bluebird.default((resolve, reject) => {
        stream.write(xctestContent, resolve);
        stream.on('error', reject);
      });
    } finally {
      var _stream, _vendContainer;
      (_stream = stream) === null || _stream === void 0 ? void 0 : _stream.end();
      (_vendContainer = vendContainer) === null || _vendContainer === void 0 ? void 0 : _vendContainer.close();
      houseArrestService.close();
    }
  }
  async _startInitialSession(majorVersion) {
    this._initialControlSession = await (0, _services.startTestmanagerdService)(this.udid);
    this._initialControlSession.registerLifecycleCallback('close', this.stop.bind(this));
    if (majorVersion < MAJOR_IOS_VERSION_11) {
      return;
    }
    const msg = new _headers.DTXMessageAuxBuffer();
    msg.appendObject(XCODE_VERSION);
    await this._initialControlSession.callChannel(DAEMON_CONNECTION_INTERFACE, '_IDE_initiateControlSessionWithProtocolVersion:', msg);
  }
  async _startExecSession(sessionIdentifier) {
    this._execTestPlanSession = await (0, _services.startTestmanagerdService)(this.udid);
    this._execTestPlanSession.registerLifecycleCallback('close', this.stop.bind(this));
    const startExecuting = () => {
      if (this._executing) {
        return;
      }
      this._executing = true;
      const msg = new _headers.DTXMessageAuxBuffer();
      msg.appendObject(XCODE_VERSION);
      this._execTestPlanSession._callChannel(false, MAGIC_CHANNEL, '_IDE_startExecutingTestPlanWithProtocolVersion:', msg);
    };
    const showLogMessage = message => {
      if (message.auxiliaries.join('').includes('Received test runner ready reply with error: (null')) {
        _logger.default.info('Test runner ready');
        setTimeout(() => startExecuting(), 1000);
      }
    };
    this._execTestPlanSession.registerSelectorCallback('_XCT_testBundleReadyWithProtocolVersion:minimumVersion:', startExecuting);
    this._execTestPlanSession.registerSelectorCallback('_XCT_logDebugMessage:', showLogMessage);
    const msg = new _headers.DTXMessageAuxBuffer();
    msg.appendObject(new _nskeyed.NSUUID(sessionIdentifier));
    msg.appendObject(`${sessionIdentifier}-746F-006D726964646C79`);
    msg.appendObject(XCODE_BUILD_PATH);
    msg.appendObject(XCODE_VERSION);
    await this._execTestPlanSession.callChannel(DAEMON_CONNECTION_INTERFACE, '_IDE_initiateSessionWithIdentifier:forClient:atPath:protocolVersion:', msg);
  }
  async _notifyTestProcessId(pid, majorVersion) {
    const msg = new _headers.DTXMessageAuxBuffer();
    msg.appendObject(pid);
    if (majorVersion >= MAJOR_IOS_VERSION_12) {
      return await this._initialControlSession.callChannel(DAEMON_CONNECTION_INTERFACE, '_IDE_authorizeTestSessionWithProcessID:', msg);
    }
    if (majorVersion <= MAJOR_IOS_VERSION_9) {
      return await this._initialControlSession.callChannel(DAEMON_CONNECTION_INTERFACE, '_IDE_initiateControlSessionForTestProcessID:', msg);
    }
    msg.appendObject(XCODE_VERSION);
    return await this._initialControlSession.callChannel(DAEMON_CONNECTION_INTERFACE, '_IDE_initiateControlSessionForTestProcessID:protocolVersion:', msg);
  }
  async start() {
    if (this.running) {
      const targetMessage = this.targetBundleId ? `(targeting ${this.targetBundleId})` : '';
      const message = `Xctest for ${this.xctestBundleId}${targetMessage} on device ${this.udid} is already running!`;
      _logger.default.info(`${message} Doing nothing here`);
      return;
    }
    this.running = true;
    try {
      const productVersion = await (0, _utilities.getOSVersion)(this.udid);
      const majorVersion = parseInt(productVersion.split('.')[0], 10);
      const sessionIdentifier = _support.util.uuidV4();
      await this._startInitialSession(majorVersion);
      await this._startExecSession(sessionIdentifier);
      const pid = await this._launchAppRunner(majorVersion, sessionIdentifier);
      await this._notifyTestProcessId(pid, majorVersion);
    } catch (e) {
      this.stop();
      throw e;
    }
  }
  stop() {
    var _this$_instrumentServ, _this$_instrumentServ2, _this$_execTestPlanSe, _this$_execTestPlanSe2, _this$_initialControl, _this$_initialControl2;
    if (!this.running) {
      return;
    }
    this.running = false;
    (_this$_instrumentServ = this._instrumentService) === null || _this$_instrumentServ === void 0 ? void 0 : _this$_instrumentServ.close();
    (_this$_instrumentServ2 = this._instrumentService) === null || _this$_instrumentServ2 === void 0 ? void 0 : _this$_instrumentServ2.dispose();
    this._instrumentService = undefined;
    (_this$_execTestPlanSe = this._execTestPlanSession) === null || _this$_execTestPlanSe === void 0 ? void 0 : _this$_execTestPlanSe.close();
    (_this$_execTestPlanSe2 = this._execTestPlanSession) === null || _this$_execTestPlanSe2 === void 0 ? void 0 : _this$_execTestPlanSe2.dispose();
    this._execTestPlanSession = undefined;
    (_this$_initialControl = this._initialControlSession) === null || _this$_initialControl === void 0 ? void 0 : _this$_initialControl.close();
    (_this$_initialControl2 = this._initialControlSession) === null || _this$_initialControl2 === void 0 ? void 0 : _this$_initialControl2.dispose();
    this._initialControlSession = undefined;
    this._executing = false;
    const targetMessage = this.targetBundleId ? `(targeting ${this.targetBundleId})` : '';
    const message = `Xctest for ${this.xctestBundleId}${targetMessage} on device ${this.udid} has stopped!`;
    _logger.default.debug(message);
  }
}
exports.Xctest = Xctest;
var _default = Xctest;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
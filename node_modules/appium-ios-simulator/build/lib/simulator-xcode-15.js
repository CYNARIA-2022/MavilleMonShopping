"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("source-map-support/register");
var _support = require("@appium/support");
var _teen_process = require("teen_process");
var _path = _interopRequireDefault(require("path"));
var _lodash = _interopRequireDefault(require("lodash"));
var _bluebird = _interopRequireDefault(require("bluebird"));
var _simulatorXcode = _interopRequireDefault(require("./simulator-xcode-14"));
class SimulatorXcode15 extends _simulatorXcode.default {
  async _fetchSystemAppBundleIds() {
    if (this._systemAppBundleIds) {
      return this._systemAppBundleIds;
    }
    const appsRoot = _path.default.resolve(_lodash.default.trim(await this.simctl.getEnv('IPHONE_SIMULATOR_ROOT')), 'Applications');
    const fetchBundleId = async appRoot => {
      const infoPlistPath = _path.default.resolve(appRoot, 'Info.plist');
      try {
        const {
          stdout
        } = await (0, _teen_process.exec)('/usr/libexec/PlistBuddy', ['-c', 'print CFBundleIdentifier', infoPlistPath]);
        return _lodash.default.trim(stdout);
      } catch (ign) {
        return null;
      }
    };
    const allApps = (await _support.fs.readdir(appsRoot)).filter(x => x.endsWith('.app')).map(x => _path.default.join(appsRoot, x));
    this._systemAppBundleIds = new Set(await _bluebird.default.all(allApps.map(fetchBundleId).filter(Boolean)));
    return this._systemAppBundleIds;
  }
  async isAppInstalled(bundleId) {
    try {
      const appContainer = await this.simctl.getAppContainer(bundleId);
      return appContainer.endsWith('.app') && (await _support.fs.exists(appContainer));
    } catch (ign) {
      return (await this._fetchSystemAppBundleIds()).has(bundleId);
    }
  }
  async getLaunchDaemonsRoot() {
    return _path.default.resolve(_lodash.default.trim(await this.simctl.getEnv('IPHONE_SIMULATOR_ROOT')), 'System/Library/LaunchDaemons');
  }
}
var _default = SimulatorXcode15;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfc3VwcG9ydCIsInJlcXVpcmUiLCJfdGVlbl9wcm9jZXNzIiwiX3BhdGgiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2xvZGFzaCIsIl9ibHVlYmlyZCIsIl9zaW11bGF0b3JYY29kZSIsIlNpbXVsYXRvclhjb2RlMTUiLCJTaW11bGF0b3JYY29kZTE0IiwiX2ZldGNoU3lzdGVtQXBwQnVuZGxlSWRzIiwiX3N5c3RlbUFwcEJ1bmRsZUlkcyIsImFwcHNSb290IiwicGF0aCIsInJlc29sdmUiLCJfIiwidHJpbSIsInNpbWN0bCIsImdldEVudiIsImZldGNoQnVuZGxlSWQiLCJhcHBSb290IiwiaW5mb1BsaXN0UGF0aCIsInN0ZG91dCIsImV4ZWMiLCJpZ24iLCJhbGxBcHBzIiwiZnMiLCJyZWFkZGlyIiwiZmlsdGVyIiwieCIsImVuZHNXaXRoIiwibWFwIiwiam9pbiIsIlNldCIsIkIiLCJhbGwiLCJCb29sZWFuIiwiaXNBcHBJbnN0YWxsZWQiLCJidW5kbGVJZCIsImFwcENvbnRhaW5lciIsImdldEFwcENvbnRhaW5lciIsImV4aXN0cyIsImhhcyIsImdldExhdW5jaERhZW1vbnNSb290IiwiX2RlZmF1bHQiLCJleHBvcnRzIiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9zaW11bGF0b3IteGNvZGUtMTUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZnMgfSBmcm9tICdAYXBwaXVtL3N1cHBvcnQnO1xuaW1wb3J0IHsgZXhlYyB9IGZyb20gJ3RlZW5fcHJvY2Vzcyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgQiBmcm9tICdibHVlYmlyZCc7XG5pbXBvcnQgU2ltdWxhdG9yWGNvZGUxNCBmcm9tICcuL3NpbXVsYXRvci14Y29kZS0xNCc7XG5cbmNsYXNzIFNpbXVsYXRvclhjb2RlMTUgZXh0ZW5kcyBTaW11bGF0b3JYY29kZTE0IHtcbiAgLyoqXG4gICAqIENvbGxlY3RzIGFuZCBjYWNoZXMgYnVuZGxlIGluZGV0aWZpZXIgb2Ygc3lzdGVtIFNpbXVsYXRvciBhcHBzXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPFNldDxzdHJpbmc+Pn1cbiAgICovXG4gIGFzeW5jIF9mZXRjaFN5c3RlbUFwcEJ1bmRsZUlkcyAoKSB7XG4gICAgaWYgKHRoaXMuX3N5c3RlbUFwcEJ1bmRsZUlkcykge1xuICAgICAgcmV0dXJuIHRoaXMuX3N5c3RlbUFwcEJ1bmRsZUlkcztcbiAgICB9XG5cbiAgICBjb25zdCBhcHBzUm9vdCA9IHBhdGgucmVzb2x2ZShcbiAgICAgIF8udHJpbShhd2FpdCB0aGlzLnNpbWN0bC5nZXRFbnYoJ0lQSE9ORV9TSU1VTEFUT1JfUk9PVCcpKSxcbiAgICAgICdBcHBsaWNhdGlvbnMnXG4gICAgKTtcbiAgICBjb25zdCBmZXRjaEJ1bmRsZUlkID0gYXN5bmMgKGFwcFJvb3QpID0+IHtcbiAgICAgIGNvbnN0IGluZm9QbGlzdFBhdGggPSBwYXRoLnJlc29sdmUoYXBwUm9vdCwgJ0luZm8ucGxpc3QnKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHtzdGRvdXR9ID0gYXdhaXQgZXhlYygnL3Vzci9saWJleGVjL1BsaXN0QnVkZHknLCBbXG4gICAgICAgICAgJy1jJywgJ3ByaW50IENGQnVuZGxlSWRlbnRpZmllcicsIGluZm9QbGlzdFBhdGhcbiAgICAgICAgXSk7XG4gICAgICAgIHJldHVybiBfLnRyaW0oc3Rkb3V0KTtcbiAgICAgIH0gY2F0Y2ggKGlnbikge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGFsbEFwcHMgPSAoYXdhaXQgZnMucmVhZGRpcihhcHBzUm9vdCkpXG4gICAgICAuZmlsdGVyKCh4KSA9PiB4LmVuZHNXaXRoKCcuYXBwJykpXG4gICAgICAubWFwKCh4KSA9PiBwYXRoLmpvaW4oYXBwc1Jvb3QsIHgpKTtcbiAgICB0aGlzLl9zeXN0ZW1BcHBCdW5kbGVJZHMgPSBuZXcgU2V0KGF3YWl0IEIuYWxsKFxuICAgICAgYWxsQXBwcy5tYXAoZmV0Y2hCdW5kbGVJZCkuZmlsdGVyKEJvb2xlYW4pXG4gICAgKSk7XG4gICAgcmV0dXJuIHRoaXMuX3N5c3RlbUFwcEJ1bmRsZUlkcztcbiAgfVxuXG4gIC8qKlxuICAgKiBWZXJpZnkgd2hldGhlciB0aGUgcGFydGljdWxhciBhcHBsaWNhdGlvbiBpcyBpbnN0YWxsZWQgb24gU2ltdWxhdG9yLlxuICAgKiBAb3ZlcnJpZGVcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGJ1bmRsZUlkIC0gVGhlIGJ1bmRsZSBpZCBvZiB0aGUgYXBwbGljYXRpb24gdG8gYmUgY2hlY2tlZC5cbiAgICogQHJldHVybiB7UHJvbWlzZTxib29sZWFuPn0gVHJ1ZSBpZiB0aGUgZ2l2ZW4gYXBwbGljYXRpb24gaXMgaW5zdGFsbGVkLlxuICAgKi9cbiAgYXN5bmMgaXNBcHBJbnN0YWxsZWQgKGJ1bmRsZUlkKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGFwcENvbnRhaW5lciA9IGF3YWl0IHRoaXMuc2ltY3RsLmdldEFwcENvbnRhaW5lcihidW5kbGVJZCk7XG4gICAgICByZXR1cm4gYXBwQ29udGFpbmVyLmVuZHNXaXRoKCcuYXBwJykgJiYgYXdhaXQgZnMuZXhpc3RzKGFwcENvbnRhaW5lcik7XG4gICAgfSBjYXRjaCAoaWduKSB7XG4gICAgICAvLyBnZXRfYXBwX2NvbnRhaW5lciBzdWJjb21tYW5kIGZhaWxzIGZvciBzeXN0ZW0gYXBwbGljYXRpb25zLFxuICAgICAgLy8gYXMgd2VsbCBhcyB0aGUgaGlkZGVuIGFwcGluZm8gY29tbWFuZFxuICAgICAgcmV0dXJuIChhd2FpdCB0aGlzLl9mZXRjaFN5c3RlbUFwcEJ1bmRsZUlkcygpKS5oYXMoYnVuZGxlSWQpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICogQGluaGVyaXRkb2NcbiAgICovXG4gIGFzeW5jIGdldExhdW5jaERhZW1vbnNSb290ICgpIHtcbiAgICByZXR1cm4gcGF0aC5yZXNvbHZlKFxuICAgICAgXy50cmltKGF3YWl0IHRoaXMuc2ltY3RsLmdldEVudignSVBIT05FX1NJTVVMQVRPUl9ST09UJykpLFxuICAgICAgJ1N5c3RlbS9MaWJyYXJ5L0xhdW5jaERhZW1vbnMnXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTaW11bGF0b3JYY29kZTE1O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLElBQUFBLFFBQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLGFBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLEtBQUEsR0FBQUMsc0JBQUEsQ0FBQUgsT0FBQTtBQUNBLElBQUFJLE9BQUEsR0FBQUQsc0JBQUEsQ0FBQUgsT0FBQTtBQUNBLElBQUFLLFNBQUEsR0FBQUYsc0JBQUEsQ0FBQUgsT0FBQTtBQUNBLElBQUFNLGVBQUEsR0FBQUgsc0JBQUEsQ0FBQUgsT0FBQTtBQUVBLE1BQU1PLGdCQUFnQixTQUFTQyx1QkFBZ0IsQ0FBQztFQU05QyxNQUFNQyx3QkFBd0JBLENBQUEsRUFBSTtJQUNoQyxJQUFJLElBQUksQ0FBQ0MsbUJBQW1CLEVBQUU7TUFDNUIsT0FBTyxJQUFJLENBQUNBLG1CQUFtQjtJQUNqQztJQUVBLE1BQU1DLFFBQVEsR0FBR0MsYUFBSSxDQUFDQyxPQUFPLENBQzNCQyxlQUFDLENBQUNDLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQ0MsTUFBTSxDQUFDQyxNQUFNLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxFQUN6RCxjQUNGLENBQUM7SUFDRCxNQUFNQyxhQUFhLEdBQUcsTUFBT0MsT0FBTyxJQUFLO01BQ3ZDLE1BQU1DLGFBQWEsR0FBR1IsYUFBSSxDQUFDQyxPQUFPLENBQUNNLE9BQU8sRUFBRSxZQUFZLENBQUM7TUFDekQsSUFBSTtRQUNGLE1BQU07VUFBQ0U7UUFBTSxDQUFDLEdBQUcsTUFBTSxJQUFBQyxrQkFBSSxFQUFDLHlCQUF5QixFQUFFLENBQ3JELElBQUksRUFBRSwwQkFBMEIsRUFBRUYsYUFBYSxDQUNoRCxDQUFDO1FBQ0YsT0FBT04sZUFBQyxDQUFDQyxJQUFJLENBQUNNLE1BQU0sQ0FBQztNQUN2QixDQUFDLENBQUMsT0FBT0UsR0FBRyxFQUFFO1FBQ1osT0FBTyxJQUFJO01BQ2I7SUFDRixDQUFDO0lBQ0QsTUFBTUMsT0FBTyxHQUFHLENBQUMsTUFBTUMsV0FBRSxDQUFDQyxPQUFPLENBQUNmLFFBQVEsQ0FBQyxFQUN4Q2dCLE1BQU0sQ0FBRUMsQ0FBQyxJQUFLQSxDQUFDLENBQUNDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUNqQ0MsR0FBRyxDQUFFRixDQUFDLElBQUtoQixhQUFJLENBQUNtQixJQUFJLENBQUNwQixRQUFRLEVBQUVpQixDQUFDLENBQUMsQ0FBQztJQUNyQyxJQUFJLENBQUNsQixtQkFBbUIsR0FBRyxJQUFJc0IsR0FBRyxDQUFDLE1BQU1DLGlCQUFDLENBQUNDLEdBQUcsQ0FDNUNWLE9BQU8sQ0FBQ00sR0FBRyxDQUFDWixhQUFhLENBQUMsQ0FBQ1MsTUFBTSxDQUFDUSxPQUFPLENBQzNDLENBQUMsQ0FBQztJQUNGLE9BQU8sSUFBSSxDQUFDekIsbUJBQW1CO0VBQ2pDO0VBU0EsTUFBTTBCLGNBQWNBLENBQUVDLFFBQVEsRUFBRTtJQUM5QixJQUFJO01BQ0YsTUFBTUMsWUFBWSxHQUFHLE1BQU0sSUFBSSxDQUFDdEIsTUFBTSxDQUFDdUIsZUFBZSxDQUFDRixRQUFRLENBQUM7TUFDaEUsT0FBT0MsWUFBWSxDQUFDVCxRQUFRLENBQUMsTUFBTSxDQUFDLEtBQUksTUFBTUosV0FBRSxDQUFDZSxNQUFNLENBQUNGLFlBQVksQ0FBQztJQUN2RSxDQUFDLENBQUMsT0FBT2YsR0FBRyxFQUFFO01BR1osT0FBTyxDQUFDLE1BQU0sSUFBSSxDQUFDZCx3QkFBd0IsQ0FBQyxDQUFDLEVBQUVnQyxHQUFHLENBQUNKLFFBQVEsQ0FBQztJQUM5RDtFQUNGO0VBTUEsTUFBTUssb0JBQW9CQSxDQUFBLEVBQUk7SUFDNUIsT0FBTzlCLGFBQUksQ0FBQ0MsT0FBTyxDQUNqQkMsZUFBQyxDQUFDQyxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUNDLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDLHVCQUF1QixDQUFDLENBQUMsRUFDekQsOEJBQ0YsQ0FBQztFQUNIO0FBQ0Y7QUFBQyxJQUFBMEIsUUFBQSxHQUVjcEMsZ0JBQWdCO0FBQUFxQyxPQUFBLENBQUFDLE9BQUEsR0FBQUYsUUFBQSJ9